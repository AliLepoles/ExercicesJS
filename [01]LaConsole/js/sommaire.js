//Creation des variables auquel on fait appel dans le cours
var tableauFruits = ["bananes","fraises","pêches"];
var nombre = 10;
var phrase = 'Hello World';
var chiens = ['Carlin','Labrador','Beagle'];
function affichage(){ console.log("Hello World")};

//Contenus du cours sous forme objet Javascript
var sommaire = {
  "debuter" : "Bienvenue dans la console.\nVous vous apprêtez à en apprendre un peu plus sur son utilisation.\nPour commencer à nous familiariser avec elle, abordons tout de suite les variables.\n\nUne variable nous permet de stocker de l'information, sous les formes suivantes : Array(Tableau), Objet, string(texte), etc...\n\nVous pouvez à tout moment reprendre ce que vous avez tapé avec la fèche du haut de votre clavier.\nPour aller à la ligne dans la console 'Maj + Entrée'\nPour afficher un élément : console.log('votre element')\n\nJuste en dessous, tapez : sommaire.variables",

  "variables" : "Parfait!\nVous venez d'afficher  une information stockée dans une variable sous la forme d'un objet. C'est la majeure partie de ce que vous ferez ici la plupart du temps, mais vous apprendrez que ceci peut-être très utile.\nOn déclare une variable en utilisant le préfixe var\nLes variables peuvent contenir un grand nombre d\'informations différentes. Il existe 4 grand types de structures possibles\n\nDes nombres\n( entiers = int / à virgules = float )\nvar nombre = 10\n\nDes mots ( string )\nvar phrase = 'Hello World'\n\nUn tableaux\nvar chiens = ['Carlin','Labrador','Beagle']\n\nUn objet (la forme plus complete)\nvar sommaire = {'debuter' : 'Bienvenue dans la console...','variables':'Parfait ! Vous venez d'afficher...'}\nCes 4 variables sont déjà déclarées, vous pouvez donc les afficher avec le console.log( 'la variable de votre choix' )\n\nLa suite --> sommaire.operateurs",

  'operateurs' : 'Comme dans des operations mathématiques, on peux manipuler nos variables avec les opérateurs numériques ( + - / * )\nOn veux ajouter "1" à notre variable\n.Tapez "nombre + 1". Le résultat affiché sera égal à 2. Affichez maintenant votre variable avec console.log(nombre).\n\nVous remarquez que sa valeur reste inchangée.\nCe que nous voulons maintenant c\'est lui ajouter "1" afin de la modifier pour de bon (une variable est par principe variable...)\nIl y a 3 manières de faire ceci.\n\nnombre = nombre + 1\nnombre += 1\nnombre++ ( incrémentation de 1 uniquement)\n\nTapez une possibilité dans les 3 proposées et affichez entier.\nSa valeur à été modifiée. Vous pouvez également remarquer que l\'on ne met pas le préfixe var car la variable est déjà definie. On peut ainsi lui ajouter ce que l\'on veux\nLa suite --> sommaire.string',

  'string' : "Une string est ce que l'on appelle une chaine de caractère, elle sera toujours encadrée de guillemets pour bien la différencier d'une variable.\nDéclarez une variable var phrase1 = 'Hello' et var phrase2 = 'World'.\nNous allons additionner ces deux variables pour en faire une 3em.\nEcrivez var phrase3 = phrase1 + phrase2.\nAfficher phrase3.\nOn appelle cela faire une 'concaténation'(Vous l'utiliserez souvent)\nSi vous affichez phrase3 les deux mots sont collés. On veux que phrase3 soit écrit correctement. Pour cela il faudrait qu'il y ait un espace entre les deux mots.\nTapez phrase3 = phrase1 + ' ' + phrase2 (Ajout d'une string espace entre guillemet)\nOn peut donc ajouter des variables avec de simples string ou des entiers à l\'aide de l'opérateur +.\nla suite --> sommaire.tableaux",

  'tableaux' : 'On appelle les tableaux Array. Ils permettent de stocker un grand nombre d\'informations sous cette forme\nvar tableauFruits = ["bananes","fraises","pêches"].\nOn peut les manipuler de différentes manières. Si l\'on souhaite ajouter un élément au tableaux on va utiliser la méthode objet push() : tableauxFruits.push( "kiwi" )\nAffichez tableauFruits puis tapez la commande précédente et affichez le résultat.\nUn tableau utilise des index pour trouver chaque information. On fera appel à une valeur d\'un tableau avec l\'élément [] et son index.\nLe tableauxFruit possède maintenant 4 éléments. Affichez des éléments pour vous entraîner en tapant tableauFruits[1] (0, 1 ,2 ou 3)\n\nIl est important de noter qu\'un tableau possède un index pour faire appel à ses valeurs qui commencent a 0. Donc pour faire appel a un élément du tableau on utilisera tableauFruits[0] pour afficher le premier élément.\nIl possède une propriété objet appelé length qui est égale au nombre d\'élément qu\'il contient. La propriété length dénombre la totalité des éléments et commence à partir de 1. Un tableau dénombrant 3 éléments aura un index comme ceci 0, 1, 2 et une length de 3 --> 1, 2, 3\n\nBonus : A tout moment vous pouvez afficher une variable dans un tableau pour regarder sa structure objet en faisant console.log([ votre variable ]), cela est extrèmement utile lorsque l\'on cherche à atteindre une information précise.\nEssayez d\'afficher une variable déjà déclarée comme nombre, phrase ou chiens dans un tableau et voir ce qu\'il se passe.\n\nla suite --> sommaire.function',

  'function' : 'Premiers bloc de programmation, les fonctions servent à activer des comportements. Elles se definissent de la sorte :\n\nfunction affichage(){\n    console.log("Hello World")\n};\n\nUne fonction possède une propriété particulière appelée le scope, ou portée en français. Cela signifie qu\'un élément ou une variable déclarée à l\'intérieur de la fonction n\'existera qu\'au moment ou la fonction sera definie et ne sera plus accessible après à moins d\'avoir fait ce qu\'il faut pour y remédier avec return "nom de la variable" ou redéfinir une variable globale a l\'intérieur de la fonction même. Pour une variable on appelera cela une variable locale. Une variable définie en dehors d\'une fonction sera de portée globale puisque atteignable à tout moment.\nIl existe differents moyens de sortir des informations d\'une fonction\nPour lancer la fonction on va écrire son nom suivi  de parenthèses --> tapez affichage()\nLa string Hello World s\'est affichée correctement. Pour le moment c\'est assez simple. Voyons maintenant la notion d\'argument\n\nla suite -->sommaire.argument',

  'argument' : 'les arguments peuvent aussi être appelé des place holder (prend la place de...). Ils vont nous permettre de définir une fonction avec une variable qui sera definie plus tard. Dans le cadre de notre fonction affichage vous allez maintenant la redéfinir avec un argument en place holder.\nEcrivez ceci : function affichage( info ){console.log(info)};\n Vous pouvez maintenant taper ce que vous souhaitez à la place de info. Une string, un entier ou une variable existante. Essayez affichage( chiens ).\nchiens ayant été definis précédemment sa valeur prend la place du place holder.\n Tapez maintenant affichage("n\'importe quoi")\nAvec la fonction affichage vous pouvez maintenant afficher ce que vous souhaitez.\n\nsommaire.boucles[0]',

  'boucles' : ['Une boucle sert à executer des propriétés fonctions celon des paramètres définis. Il en existe 3 sortes. la boucle "while", la boucle "do while" et la boucle "for". Chacune possède une utilité qui lui est propre\nLa suite sommaire.boucles[1]','La boucle while :\n\nLa boucle while s\'écris de la sorte:\nwhile("condition"){"execution"}\nconditon sera égale à quelque chose de ce style : var nombre < 10 et incluera une incrémentation de nombre à l\'intérieur du while dans "execution"\n\nAttention si vous oubliez l\'incrémentation de i dans ce cas précis vous produirez une boucle infinie car i sera toujours égale à 0. Cela peut être fatal dans le cas d\'information complexes retournées par la boucle.\n\nTapez ceci :\n var i = 0\nwhile( i<10 ){\n    console.log(i)\n    i++\n};\n et appuyez sur entrée.\n\nVous pouvez utiliser cette forme de boucle dans le cas ou vous souhaitez exécuter une propriété jusqu\'à un certain point.\n\nLa suite --> sommaire.boucles[2]','La boucle do while :\nElle s\'écrira sous cette forme\ndo{\n    instruction 1\n    instruction 2\n    instruction 3...\n}while( condition )\n\nPour avoir le même resultat que la boucle précédente, exécutez dans la console ceci var j = 0 do{\n    console.log(j)\n    j++\n}while(j<10)\n\nVous pouvez remarquer que cette fois le nombre 10 est affiché car la conditon n\'est analysée qu\'aprés l\'exécution des instructions\n\nLa suite --> sommaire.boucles[3]','La boucle for :\nLa plus couramment utilisée, cette boucle permet de faire ce qui pourrait s\'apparenter à un mapping. Le plus souvent elle sert à explorer les éléments contenus dans un tableau.\nElle s\'écrira sous cette forme :\nfor( initialisation; condition; incrémentation ){ instructions; }\nVous avez sûremment remarqué que cette partie sur les boucles s\'affiche comme ceci depuis tout à l\'heure --> sommaire.boucles[0]. Le schéma de données est constitué de la sorte, sommaire est en fait un objet à plusieurs entrées et boucles contient en fait un tableau.\nà l\'aide d\'une boucle for on va afficher tous les éléments de boucle. Procedez de la sorte :\nfor(var i = 0;i<sommaire.boucles.length;i++){\n    console.log( sommaire.boucles[i] )\n}\n\net appuyez sur entrée.','Bravo!!\n\nExpliquons maintenant ce qu\'il vient de se passer.\nvar i est votre variable d\'incrémentation.\nRappelez vous que dans le cas d\'un tableau le premier index est égal à 0 et la propriété length commence à 1 et est toujours égale à +1 par rapport à l\'index.\nPour explorer notre tableau en entier, on voudra donc que la valeur de i soit toujours strictement inférieur à sommaire.boucles.length.\n\nSi vous le souhaitez vous pouvez essayer de reproduire l\'exercice avec le tableau chiens en procedant de la même façon.\n\ncas pratique --> sommaire.exo01'],

  'exo01' : 'En utilisant les éléments vus précedemment, affichez dans la console une pyramide constituée de "#" et possédant 7 étages. Elle devra ressembler à ceci :\n#\n# #\n# # #\n# # # #\n# # # # #\n# # # # # #\n# # # # # # #\n\nN\'oubliez pas qu\'à tout moment vous pouvez accéder à n\'importe quel chapitre abordé précédemment en affichant le sommaire avec console.log(sommaire) et en appelant la propriété objet avec le "." et la propriété desirée',

  'correctionExo01' : 'var ash = "#"\n\nfor( var i = 0; i < 7; i++ ){\n    console.log( ash )\n    ash += " #"\n};\n\nla suite --> sommaire.DOM',

  'DOM' : 'Le DOM est un diminutif de document, c\'est ainsi que l\'on nomme la page HTML. Le Javascript est un language qui permet d\'intervenir directement dans le DOM pour changer des éléments en temps réel. Il est très puissant lorsqu\'il s\'agit de mettre en place une interactivité avec l\'utilisateur.\nNous allons passer à l\'exercice suivant mais avant cela nous devons construire le lien qui va nous permettre de changer de page.\nTout va reposer sur votre capacité à identifier un élément dans le Dom puis à le changer.\nUne technique consiste à utiliser la méthode objet document.getElementBy...\n\nVous pouvez stocker un élément de la feuille HTML dans une variable qui représentera ensuite cet élément.\nCommencez par déclarer une variable que l\'on va appeler "var lien" en vue de sa future modification en lien puis stockez à l\'intérieur de cette dernière l\'élément h1 capturé du DOM.\nUne fois l\'élément identifié, affichez-le dans un tableau avec console.log([lien]) puis trouvez la valeur innerHTML. Vous allez devoir changer cette valeur pour qu\'elle contienne une balise <a> pointant sur une valeur contenue dans sommaire.lien\n\nA chaque fois que vous avancez dans votre code pensez à afficher votre variable avec console.log pour être sûr de ce qui est encapsulé a l\'intérieur.\n\nAttention, il y a une subtilité dans la propriété getElementsBy...\nVous pouvez aller chercher une balise HTML (tagName), une class (ClassName), une ID ou d\'autres éléments. Par nature, une ID est unique, donc la propriété getElementByID sera au singulier et renvera un objet unique. Si vous allez chercher une classe ou un tagName, il est possible qu\'il en trouve plusieurs sur la page, getElementsByTagName s\'écris donc au pluriel et renverra dans tous les cas un tableau même si il n\'en trouve qu\'un seul élément.\nAffichez votre variable avec console.log afin d\'explorer l\'objet dans la console. Chaque élément affiché est une propriété objet et peut-être changé en déclarant votre variable, son index si il est dans un tableau, puis la propriété objet que vous voulez modifier ou afficher. Cherchez un élément intitulé innerHTML et remplacez sa valeur avec une balise "a" contenant en href une valeur stockée dans l\'objet sommaire.lien',

  'correctionDOM' : 'var lien = document.getElementsByTagName("h1")\nlien[0].innerHTML = "<a href=\'" + sommaire.lien + "\'>Liens Vers l\'exercice</a>"',

  'lien' : '../[02]ExoRetrouvailles/index.html'
}
